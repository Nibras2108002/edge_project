# -*- coding: utf-8 -*-
"""Nibras_2008012_kaggle_project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TOWfWKwSjr_MA5iEus5XIHwiQhprTFlL
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive/Colab Notebooks/simple CNN Code"

dataset_path = "/content/drive/My Drive/Colab Notebooks/Research/simple CNN Code"

import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import (Conv2D, MaxPooling2D, BatchNormalization,
                                     ELU, Flatten, Dense, Dropout)
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Dataset directory
dataset_path = "/content/drive/My Drive/Colab Notebooks/simple CNN Code"


# Data Preprocessing & Augmentation
datagen = ImageDataGenerator(
    rescale=1./255,   # Normalize pixel values
    validation_split=0.2  # 80-20 train-validation split
)

# Load Training Data
train_generator = datagen.flow_from_directory(
    dataset_path,
    target_size=(32, 32),
    batch_size=32,
    color_mode='grayscale',
    class_mode='categorical',
    subset='training'
)

# Load Validation Data
validation_generator = datagen.flow_from_directory(
    dataset_path,
    target_size=(32, 32),
    batch_size=32,
    color_mode='grayscale',
    class_mode='categorical',
    subset='validation'
)

# Define CNN Model
model = Sequential([
    # Input Layer
    tf.keras.layers.InputLayer(input_shape=(32, 32, 1)),

    # First Conv Block
    Conv2D(64, (6, 6), padding='same'),
    BatchNormalization(),
    ELU(),
    MaxPooling2D(pool_size=(2, 2), strides=2),

    # Second Conv Block
    Conv2D(64, (6, 6), padding='same'),
    BatchNormalization(),
    ELU(),

    # Third Conv Block
    Conv2D(128, (6, 6), padding='same'),
    MaxPooling2D(pool_size=(3, 3), strides=2),

    # Fourth Conv Block
    Conv2D(128, (6, 6), padding='same'),
    BatchNormalization(),
    ELU(),
    MaxPooling2D(pool_size=(3, 3), strides=2),

    # Fully Connected Layers
    Flatten(),
    Dense(256),
    ELU(),
    Dense(256),
    ELU(),

    # Output Layer
    Dense(3, activation='softmax')  # 3 Tumor Classes
])

# Compile Model
model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.001, momentum=0.9),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Train Model
history = model.fit(
    train_generator,
    epochs=15,
    validation_data=validation_generator
)

# Evaluate Model on Validation Set
y_pred = model.predict(validation_generator)
y_pred_classes = np.argmax(y_pred, axis=1)  # Convert predictions to class indices
y_true = validation_generator.classes        # True labels

# Plot Confusion Matrix
cm = confusion_matrix(y_true, y_pred_classes)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=validation_generator.class_indices.keys())
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

# Calculate Accuracy
accuracy = np.sum(y_pred_classes == y_true) / len(y_true)
print(f"Final Validation Accuracy: {accuracy:.4f}")